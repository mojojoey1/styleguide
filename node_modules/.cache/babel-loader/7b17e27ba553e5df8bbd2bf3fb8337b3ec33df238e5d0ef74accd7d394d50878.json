{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jopitt\\\\Documents\\\\code\\\\figmaTest2\\\\src\\\\OrgChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { AvatarCard } from './components/AvatarCard';\nimport { ContextMenu } from './components/ContextMenu';\nimport { getDesignTokens } from './theme/tokens';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OrgChart = ({\n  organization,\n  isDarkMode = false,\n  onSelectionChange\n}) => {\n  _s();\n  const [selectedId, setSelectedId] = useState(null);\n  const [menuPosition, setMenuPosition] = useState(null);\n  const designTokens = getDesignTokens(isDarkMode);\n  const handleSelect = id => {\n    const newSelectedId = id === selectedId ? null : id;\n    setSelectedId(newSelectedId);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(newSelectedId);\n    if (newSelectedId) {\n      // Get the clicked element's position\n      const element = document.getElementById(id);\n      if (element) {\n        const rect = element.getBoundingClientRect();\n        // Position the menu to the right of the card\n        setMenuPosition({\n          x: rect.right + 8,\n          // 8px gap\n          y: rect.top\n        });\n      }\n    } else {\n      setMenuPosition(null);\n    }\n  };\n  const getSelectedPerson = () => {\n    if (!selectedId) return null;\n    const [type, teamIndex, memberIndex] = selectedId.split('-');\n    const team = organization.teams[parseInt(teamIndex)];\n    if (type === 'manager') {\n      return {\n        ...team.manager,\n        role: 'Manager'\n      };\n    } else {\n      return {\n        ...team.members[parseInt(memberIndex)],\n        role: 'IC'\n      };\n    }\n  };\n  const selectedPerson = getSelectedPerson();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'center',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(auto-fill, minmax(${designTokens.layout.cardMinWidth}, max-content))`,\n        gap: designTokens.layout.columnGap,\n        maxWidth: '100%',\n        justifyContent: 'center'\n      },\n      children: organization.teams.map((team, teamIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: designTokens.layout.rowGap,\n          width: 'fit-content'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: `manager-${teamIndex}`,\n          children: /*#__PURE__*/_jsxDEV(AvatarCard, {\n            id: `manager-${teamIndex}`,\n            name: team.manager.name,\n            title: team.manager.title,\n            imageUrl: team.manager.imageUrl,\n            role: \"Manager\",\n            isDarkMode: isDarkMode,\n            isSelected: selectedId === `manager-${teamIndex}`,\n            onSelect: handleSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            gap: designTokens.layout.rowGap\n          },\n          children: team.members.map((member, memberIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            id: `member-${teamIndex}-${memberIndex}`,\n            children: /*#__PURE__*/_jsxDEV(AvatarCard, {\n              id: `member-${teamIndex}-${memberIndex}`,\n              name: member.name,\n              title: member.title,\n              imageUrl: member.imageUrl,\n              role: \"IC\",\n              isDarkMode: isDarkMode,\n              isSelected: selectedId === `member-${teamIndex}-${memberIndex}`,\n              onSelect: handleSelect\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 37\n            }, this)\n          }, memberIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this)]\n      }, teamIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), selectedPerson && menuPosition && /*#__PURE__*/_jsxDEV(ContextMenu, {\n      person: selectedPerson,\n      isDarkMode: isDarkMode,\n      position: menuPosition,\n      onClose: () => {\n        setSelectedId(null);\n        setMenuPosition(null);\n        onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(OrgChart, \"OPzuUVpaBwB3W8zPxoFVfBgBPgY=\");\n_c = OrgChart;\nvar _c;\n$RefreshReg$(_c, \"OrgChart\");","map":{"version":3,"names":["React","useState","AvatarCard","ContextMenu","getDesignTokens","jsxDEV","_jsxDEV","OrgChart","organization","isDarkMode","onSelectionChange","_s","selectedId","setSelectedId","menuPosition","setMenuPosition","designTokens","handleSelect","id","newSelectedId","element","document","getElementById","rect","getBoundingClientRect","x","right","y","top","getSelectedPerson","type","teamIndex","memberIndex","split","team","teams","parseInt","manager","role","members","selectedPerson","style","width","display","justifyContent","position","children","gridTemplateColumns","layout","cardMinWidth","gap","columnGap","maxWidth","map","flexDirection","rowGap","name","title","imageUrl","isSelected","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","member","person","onClose","_c","$RefreshReg$"],"sources":["C:/Users/jopitt/Documents/code/figmaTest2/src/OrgChart.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Organization } from './types';\r\nimport { AvatarCard } from './components/AvatarCard';\r\nimport { ContextMenu } from './components/ContextMenu';\r\nimport { getDesignTokens } from './theme/tokens';\r\n\r\ninterface OrgChartProps {\r\n    organization: Organization;\r\n    isDarkMode?: boolean;\r\n    onSelectionChange?: (selectedId: string | null) => void;\r\n}\r\n\r\nexport const OrgChart: React.FC<OrgChartProps> = ({ \r\n    organization, \r\n    isDarkMode = false,\r\n    onSelectionChange \r\n}) => {\r\n    const [selectedId, setSelectedId] = useState<string | null>(null);\r\n    const [menuPosition, setMenuPosition] = useState<{ x: number; y: number } | null>(null);\r\n    const designTokens = getDesignTokens(isDarkMode);\r\n\r\n    const handleSelect = (id: string) => {\r\n        const newSelectedId = id === selectedId ? null : id;\r\n        setSelectedId(newSelectedId);\r\n        onSelectionChange?.(newSelectedId);\r\n\r\n        if (newSelectedId) {\r\n            // Get the clicked element's position\r\n            const element = document.getElementById(id);\r\n            if (element) {\r\n                const rect = element.getBoundingClientRect();\r\n                // Position the menu to the right of the card\r\n                setMenuPosition({\r\n                    x: rect.right + 8, // 8px gap\r\n                    y: rect.top,\r\n                });\r\n            }\r\n        } else {\r\n            setMenuPosition(null);\r\n        }\r\n    };\r\n\r\n    const getSelectedPerson = () => {\r\n        if (!selectedId) return null;\r\n\r\n        const [type, teamIndex, memberIndex] = selectedId.split('-');\r\n        const team = organization.teams[parseInt(teamIndex)];\r\n        \r\n        if (type === 'manager') {\r\n            return {\r\n                ...team.manager,\r\n                role: 'Manager' as const\r\n            };\r\n        } else {\r\n            return {\r\n                ...team.members[parseInt(memberIndex)],\r\n                role: 'IC' as const\r\n            };\r\n        }\r\n    };\r\n\r\n    const selectedPerson = getSelectedPerson();\r\n\r\n    return (\r\n        <div style={{\r\n            width: '100%',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            position: 'relative',\r\n        }}>\r\n            <div style={{\r\n                display: 'grid',\r\n                gridTemplateColumns: `repeat(auto-fill, minmax(${designTokens.layout.cardMinWidth}, max-content))`,\r\n                gap: designTokens.layout.columnGap,\r\n                maxWidth: '100%',\r\n                justifyContent: 'center',\r\n            }}>\r\n                {organization.teams.map((team, teamIndex) => (\r\n                    <div key={teamIndex} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        gap: designTokens.layout.rowGap,\r\n                        width: 'fit-content',\r\n                    }}>\r\n                        {/* Manager Card */}\r\n                        <div id={`manager-${teamIndex}`}>\r\n                            <AvatarCard\r\n                                id={`manager-${teamIndex}`}\r\n                                name={team.manager.name}\r\n                                title={team.manager.title}\r\n                                imageUrl={team.manager.imageUrl}\r\n                                role=\"Manager\"\r\n                                isDarkMode={isDarkMode}\r\n                                isSelected={selectedId === `manager-${teamIndex}`}\r\n                                onSelect={handleSelect}\r\n                            />\r\n                        </div>\r\n\r\n                        {/* Team Members */}\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            gap: designTokens.layout.rowGap,\r\n                        }}>\r\n                            {team.members.map((member, memberIndex) => (\r\n                                <div key={memberIndex} id={`member-${teamIndex}-${memberIndex}`}>\r\n                                    <AvatarCard\r\n                                        id={`member-${teamIndex}-${memberIndex}`}\r\n                                        name={member.name}\r\n                                        title={member.title}\r\n                                        imageUrl={member.imageUrl}\r\n                                        role=\"IC\"\r\n                                        isDarkMode={isDarkMode}\r\n                                        isSelected={selectedId === `member-${teamIndex}-${memberIndex}`}\r\n                                        onSelect={handleSelect}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Context Menu */}\r\n            {selectedPerson && menuPosition && (\r\n                <ContextMenu\r\n                    person={selectedPerson}\r\n                    isDarkMode={isDarkMode}\r\n                    position={menuPosition}\r\n                    onClose={() => {\r\n                        setSelectedId(null);\r\n                        setMenuPosition(null);\r\n                        onSelectionChange?.(null);\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,eAAe,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQjD,OAAO,MAAMC,QAAiC,GAAGA,CAAC;EAC9CC,YAAY;EACZC,UAAU,GAAG,KAAK;EAClBC;AACJ,CAAC,KAAK;EAAAC,EAAA;EACF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EACjE,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAkC,IAAI,CAAC;EACvF,MAAMe,YAAY,GAAGZ,eAAe,CAACK,UAAU,CAAC;EAEhD,MAAMQ,YAAY,GAAIC,EAAU,IAAK;IACjC,MAAMC,aAAa,GAAGD,EAAE,KAAKN,UAAU,GAAG,IAAI,GAAGM,EAAE;IACnDL,aAAa,CAACM,aAAa,CAAC;IAC5BT,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAGS,aAAa,CAAC;IAElC,IAAIA,aAAa,EAAE;MACf;MACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAACJ,EAAE,CAAC;MAC3C,IAAIE,OAAO,EAAE;QACT,MAAMG,IAAI,GAAGH,OAAO,CAACI,qBAAqB,CAAC,CAAC;QAC5C;QACAT,eAAe,CAAC;UACZU,CAAC,EAAEF,IAAI,CAACG,KAAK,GAAG,CAAC;UAAE;UACnBC,CAAC,EAAEJ,IAAI,CAACK;QACZ,CAAC,CAAC;MACN;IACJ,CAAC,MAAM;MACHb,eAAe,CAAC,IAAI,CAAC;IACzB;EACJ,CAAC;EAED,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAACjB,UAAU,EAAE,OAAO,IAAI;IAE5B,MAAM,CAACkB,IAAI,EAAEC,SAAS,EAAEC,WAAW,CAAC,GAAGpB,UAAU,CAACqB,KAAK,CAAC,GAAG,CAAC;IAC5D,MAAMC,IAAI,GAAG1B,YAAY,CAAC2B,KAAK,CAACC,QAAQ,CAACL,SAAS,CAAC,CAAC;IAEpD,IAAID,IAAI,KAAK,SAAS,EAAE;MACpB,OAAO;QACH,GAAGI,IAAI,CAACG,OAAO;QACfC,IAAI,EAAE;MACV,CAAC;IACL,CAAC,MAAM;MACH,OAAO;QACH,GAAGJ,IAAI,CAACK,OAAO,CAACH,QAAQ,CAACJ,WAAW,CAAC,CAAC;QACtCM,IAAI,EAAE;MACV,CAAC;IACL;EACJ,CAAC;EAED,MAAME,cAAc,GAAGX,iBAAiB,CAAC,CAAC;EAE1C,oBACIvB,OAAA;IAAKmC,KAAK,EAAE;MACRC,KAAK,EAAE,MAAM;MACbC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,QAAQ;MACxBC,QAAQ,EAAE;IACd,CAAE;IAAAC,QAAA,gBACExC,OAAA;MAAKmC,KAAK,EAAE;QACRE,OAAO,EAAE,MAAM;QACfI,mBAAmB,EAAE,4BAA4B/B,YAAY,CAACgC,MAAM,CAACC,YAAY,iBAAiB;QAClGC,GAAG,EAAElC,YAAY,CAACgC,MAAM,CAACG,SAAS;QAClCC,QAAQ,EAAE,MAAM;QAChBR,cAAc,EAAE;MACpB,CAAE;MAAAE,QAAA,EACGtC,YAAY,CAAC2B,KAAK,CAACkB,GAAG,CAAC,CAACnB,IAAI,EAAEH,SAAS,kBACpCzB,OAAA;QAAqBmC,KAAK,EAAE;UACxBE,OAAO,EAAE,MAAM;UACfW,aAAa,EAAE,QAAQ;UACvBJ,GAAG,EAAElC,YAAY,CAACgC,MAAM,CAACO,MAAM;UAC/Bb,KAAK,EAAE;QACX,CAAE;QAAAI,QAAA,gBAEExC,OAAA;UAAKY,EAAE,EAAE,WAAWa,SAAS,EAAG;UAAAe,QAAA,eAC5BxC,OAAA,CAACJ,UAAU;YACPgB,EAAE,EAAE,WAAWa,SAAS,EAAG;YAC3ByB,IAAI,EAAEtB,IAAI,CAACG,OAAO,CAACmB,IAAK;YACxBC,KAAK,EAAEvB,IAAI,CAACG,OAAO,CAACoB,KAAM;YAC1BC,QAAQ,EAAExB,IAAI,CAACG,OAAO,CAACqB,QAAS;YAChCpB,IAAI,EAAC,SAAS;YACd7B,UAAU,EAAEA,UAAW;YACvBkD,UAAU,EAAE/C,UAAU,KAAK,WAAWmB,SAAS,EAAG;YAClD6B,QAAQ,EAAE3C;UAAa;YAAA4C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eAGN1D,OAAA;UAAKmC,KAAK,EAAE;YACRE,OAAO,EAAE,MAAM;YACfW,aAAa,EAAE,QAAQ;YACvBJ,GAAG,EAAElC,YAAY,CAACgC,MAAM,CAACO;UAC7B,CAAE;UAAAT,QAAA,EACGZ,IAAI,CAACK,OAAO,CAACc,GAAG,CAAC,CAACY,MAAM,EAAEjC,WAAW,kBAClC1B,OAAA;YAAuBY,EAAE,EAAE,UAAUa,SAAS,IAAIC,WAAW,EAAG;YAAAc,QAAA,eAC5DxC,OAAA,CAACJ,UAAU;cACPgB,EAAE,EAAE,UAAUa,SAAS,IAAIC,WAAW,EAAG;cACzCwB,IAAI,EAAES,MAAM,CAACT,IAAK;cAClBC,KAAK,EAAEQ,MAAM,CAACR,KAAM;cACpBC,QAAQ,EAAEO,MAAM,CAACP,QAAS;cAC1BpB,IAAI,EAAC,IAAI;cACT7B,UAAU,EAAEA,UAAW;cACvBkD,UAAU,EAAE/C,UAAU,KAAK,UAAUmB,SAAS,IAAIC,WAAW,EAAG;cAChE4B,QAAQ,EAAE3C;YAAa;cAAA4C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1B;UAAC,GAVIhC,WAAW;YAAA6B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAWhB,CACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA,GAxCAjC,SAAS;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAyCd,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAGLxB,cAAc,IAAI1B,YAAY,iBAC3BR,OAAA,CAACH,WAAW;MACR+D,MAAM,EAAE1B,cAAe;MACvB/B,UAAU,EAAEA,UAAW;MACvBoC,QAAQ,EAAE/B,YAAa;MACvBqD,OAAO,EAAEA,CAAA,KAAM;QACXtD,aAAa,CAAC,IAAI,CAAC;QACnBE,eAAe,CAAC,IAAI,CAAC;QACrBL,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAG,IAAI,CAAC;MAC7B;IAAE;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACrD,EAAA,CA9HWJ,QAAiC;AAAA6D,EAAA,GAAjC7D,QAAiC;AAAA,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}