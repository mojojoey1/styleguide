{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jopitt\\\\Documents\\\\code\\\\figmaTest2\\\\src\\\\OrgChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { AvatarCard } from './components/AvatarCard';\nimport { getDesignTokens } from './theme/tokens';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OrgChart = ({\n  organization,\n  isDarkMode = false,\n  onSelectionChange\n}) => {\n  _s();\n  const [selectedId, setSelectedId] = useState(null);\n  const designTokens = getDesignTokens(isDarkMode);\n  const handleSelect = id => {\n    const newSelectedId = id === selectedId ? null : id;\n    setSelectedId(newSelectedId);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(newSelectedId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(auto-fill, minmax(${designTokens.layout.cardMinWidth}, max-content))`,\n        gap: designTokens.layout.columnGap,\n        maxWidth: '100%',\n        justifyContent: 'center'\n      },\n      children: organization.teams.map((team, teamIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: designTokens.layout.rowGap,\n          width: 'fit-content'\n        },\n        children: [/*#__PURE__*/_jsxDEV(AvatarCard, {\n          id: `manager-${teamIndex}`,\n          name: team.manager.name,\n          title: team.manager.title,\n          imageUrl: team.manager.imageUrl,\n          role: \"Manager\",\n          isDarkMode: isDarkMode,\n          isSelected: selectedId === `manager-${teamIndex}`,\n          onSelect: handleSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            gap: designTokens.layout.rowGap\n          },\n          children: team.members.map((member, memberIndex) => /*#__PURE__*/_jsxDEV(AvatarCard, {\n            id: `member-${teamIndex}-${memberIndex}`,\n            name: member.name,\n            title: member.title,\n            imageUrl: member.imageUrl,\n            role: \"IC\",\n            isDarkMode: isDarkMode,\n            isSelected: selectedId === `member-${teamIndex}-${memberIndex}`,\n            onSelect: handleSelect\n          }, memberIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)]\n      }, teamIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(OrgChart, \"6tRyBKpA6Tf8zEXxvntvrffDmeA=\");\n_c = OrgChart;\nvar _c;\n$RefreshReg$(_c, \"OrgChart\");","map":{"version":3,"names":["React","useState","AvatarCard","getDesignTokens","jsxDEV","_jsxDEV","OrgChart","organization","isDarkMode","onSelectionChange","_s","selectedId","setSelectedId","designTokens","handleSelect","id","newSelectedId","style","width","display","justifyContent","children","gridTemplateColumns","layout","cardMinWidth","gap","columnGap","maxWidth","teams","map","team","teamIndex","flexDirection","rowGap","name","manager","title","imageUrl","role","isSelected","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","members","member","memberIndex","_c","$RefreshReg$"],"sources":["C:/Users/jopitt/Documents/code/figmaTest2/src/OrgChart.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Organization } from './types';\r\nimport { AvatarCard } from './components/AvatarCard';\r\nimport { getDesignTokens } from './theme/tokens';\r\n\r\ninterface OrgChartProps {\r\n    organization: Organization;\r\n    isDarkMode?: boolean;\r\n    onSelectionChange?: (selectedId: string | null) => void;\r\n}\r\n\r\nexport const OrgChart: React.FC<OrgChartProps> = ({ \r\n    organization, \r\n    isDarkMode = false,\r\n    onSelectionChange \r\n}) => {\r\n    const [selectedId, setSelectedId] = useState<string | null>(null);\r\n    const designTokens = getDesignTokens(isDarkMode);\r\n\r\n    const handleSelect = (id: string) => {\r\n        const newSelectedId = id === selectedId ? null : id;\r\n        setSelectedId(newSelectedId);\r\n        onSelectionChange?.(newSelectedId);\r\n    };\r\n\r\n    return (\r\n        <div style={{\r\n            width: '100%',\r\n            display: 'flex',\r\n            justifyContent: 'center'\r\n        }}>\r\n            <div style={{\r\n                display: 'grid',\r\n                gridTemplateColumns: `repeat(auto-fill, minmax(${designTokens.layout.cardMinWidth}, max-content))`,\r\n                gap: designTokens.layout.columnGap,\r\n                maxWidth: '100%',\r\n                justifyContent: 'center',\r\n            }}>\r\n                {organization.teams.map((team, teamIndex) => (\r\n                    <div key={teamIndex} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        gap: designTokens.layout.rowGap,\r\n                        width: 'fit-content',\r\n                    }}>\r\n                        {/* Manager Card */}\r\n                        <AvatarCard\r\n                            id={`manager-${teamIndex}`}\r\n                            name={team.manager.name}\r\n                            title={team.manager.title}\r\n                            imageUrl={team.manager.imageUrl}\r\n                            role=\"Manager\"\r\n                            isDarkMode={isDarkMode}\r\n                            isSelected={selectedId === `manager-${teamIndex}`}\r\n                            onSelect={handleSelect}\r\n                        />\r\n\r\n                        {/* Team Members */}\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            gap: designTokens.layout.rowGap,\r\n                        }}>\r\n                            {team.members.map((member, memberIndex) => (\r\n                                <AvatarCard\r\n                                    key={memberIndex}\r\n                                    id={`member-${teamIndex}-${memberIndex}`}\r\n                                    name={member.name}\r\n                                    title={member.title}\r\n                                    imageUrl={member.imageUrl}\r\n                                    role=\"IC\"\r\n                                    isDarkMode={isDarkMode}\r\n                                    isSelected={selectedId === `member-${teamIndex}-${memberIndex}`}\r\n                                    onSelect={handleSelect}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}