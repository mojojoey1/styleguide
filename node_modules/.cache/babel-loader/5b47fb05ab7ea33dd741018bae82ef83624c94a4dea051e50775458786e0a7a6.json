{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jopitt\\\\Documents\\\\code\\\\figmaTest2\\\\src\\\\OrgChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useLayoutEffect } from 'react';\nimport { AvatarCard } from './components/AvatarCard';\nimport { ContextMenu } from './components/ContextMenu';\nimport { getDesignTokens } from './theme/tokens';\n\n// Constants for menu positioning\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MENU_WIDTH = 320; // max-width of the context menu\nconst MENU_GAP = 8; // gap between card and menu\n\nexport const OrgChart = ({\n  organization,\n  isDarkMode = false,\n  onSelectionChange\n}) => {\n  _s();\n  const [selectedId, setSelectedId] = useState(null);\n  const [menuPosition, setMenuPosition] = useState(null);\n  const designTokens = getDesignTokens(isDarkMode);\n  const calculateMenuPosition = element => {\n    const rect = element.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n\n    // Check if there's enough space on the right\n    const spaceOnRight = viewportWidth - rect.right;\n    const willFitOnRight = spaceOnRight >= MENU_WIDTH + MENU_GAP;\n    return {\n      x: willFitOnRight ? rect.right + MENU_GAP : rect.right - MENU_WIDTH - MENU_GAP,\n      y: rect.top\n    };\n  };\n\n  // Update menu position on window resize\n  useLayoutEffect(() => {\n    if (selectedId) {\n      const element = document.getElementById(selectedId);\n      if (element) {\n        setMenuPosition(calculateMenuPosition(element));\n      }\n    }\n  }, [selectedId, window.innerWidth]);\n  const handleSelect = id => {\n    const newSelectedId = id === selectedId ? null : id;\n    setSelectedId(newSelectedId);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(newSelectedId);\n    if (newSelectedId) {\n      const element = document.getElementById(id);\n      if (element) {\n        setMenuPosition(calculateMenuPosition(element));\n      }\n    } else {\n      setMenuPosition(null);\n    }\n  };\n  const getSelectedPerson = () => {\n    if (!selectedId) return null;\n    const [type, teamIndex, memberIndex] = selectedId.split('-');\n    const team = organization.teams[parseInt(teamIndex)];\n    if (type === 'manager') {\n      return {\n        ...team.manager,\n        role: 'Manager'\n      };\n    } else {\n      return {\n        ...team.members[parseInt(memberIndex)],\n        role: 'IC'\n      };\n    }\n  };\n  const selectedPerson = getSelectedPerson();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'center',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(auto-fill, minmax(${designTokens.layout.cardMinWidth}, max-content))`,\n        gap: designTokens.layout.columnGap,\n        maxWidth: '100%',\n        justifyContent: 'center'\n      },\n      children: organization.teams.map((team, teamIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: designTokens.layout.rowGap,\n          width: 'fit-content'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: `manager-${teamIndex}`,\n          children: /*#__PURE__*/_jsxDEV(AvatarCard, {\n            id: `manager-${teamIndex}`,\n            name: team.manager.name,\n            title: team.manager.title,\n            imageUrl: team.manager.imageUrl,\n            role: \"Manager\",\n            isDarkMode: isDarkMode,\n            isSelected: selectedId === `manager-${teamIndex}`,\n            onSelect: handleSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            gap: designTokens.layout.rowGap\n          },\n          children: team.members.map((member, memberIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            id: `member-${teamIndex}-${memberIndex}`,\n            children: /*#__PURE__*/_jsxDEV(AvatarCard, {\n              id: `member-${teamIndex}-${memberIndex}`,\n              name: member.name,\n              title: member.title,\n              imageUrl: member.imageUrl,\n              role: \"IC\",\n              isDarkMode: isDarkMode,\n              isSelected: selectedId === `member-${teamIndex}-${memberIndex}`,\n              onSelect: handleSelect\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 37\n            }, this)\n          }, memberIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this)]\n      }, teamIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), selectedPerson && menuPosition && /*#__PURE__*/_jsxDEV(ContextMenu, {\n      person: selectedPerson,\n      isDarkMode: isDarkMode,\n      position: menuPosition,\n      onClose: () => {\n        setSelectedId(null);\n        setMenuPosition(null);\n        onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n_s(OrgChart, \"U9H5KQTUbqp6HJgAxsLfRttrRls=\");\n_c = OrgChart;\nvar _c;\n$RefreshReg$(_c, \"OrgChart\");","map":{"version":3,"names":["React","useState","useLayoutEffect","AvatarCard","ContextMenu","getDesignTokens","jsxDEV","_jsxDEV","MENU_WIDTH","MENU_GAP","OrgChart","organization","isDarkMode","onSelectionChange","_s","selectedId","setSelectedId","menuPosition","setMenuPosition","designTokens","calculateMenuPosition","element","rect","getBoundingClientRect","viewportWidth","window","innerWidth","spaceOnRight","right","willFitOnRight","x","y","top","document","getElementById","handleSelect","id","newSelectedId","getSelectedPerson","type","teamIndex","memberIndex","split","team","teams","parseInt","manager","role","members","selectedPerson","style","width","display","justifyContent","position","children","gridTemplateColumns","layout","cardMinWidth","gap","columnGap","maxWidth","map","flexDirection","rowGap","name","title","imageUrl","isSelected","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","member","person","onClose","_c","$RefreshReg$"],"sources":["C:/Users/jopitt/Documents/code/figmaTest2/src/OrgChart.tsx"],"sourcesContent":["import React, { useState, useLayoutEffect } from 'react';\r\nimport { Organization } from './types';\r\nimport { AvatarCard } from './components/AvatarCard';\r\nimport { ContextMenu } from './components/ContextMenu';\r\nimport { getDesignTokens } from './theme/tokens';\r\n\r\n// Constants for menu positioning\r\nconst MENU_WIDTH = 320; // max-width of the context menu\r\nconst MENU_GAP = 8; // gap between card and menu\r\n\r\ninterface OrgChartProps {\r\n    organization: Organization;\r\n    isDarkMode?: boolean;\r\n    onSelectionChange?: (selectedId: string | null) => void;\r\n}\r\n\r\nexport const OrgChart: React.FC<OrgChartProps> = ({ \r\n    organization, \r\n    isDarkMode = false,\r\n    onSelectionChange \r\n}) => {\r\n    const [selectedId, setSelectedId] = useState<string | null>(null);\r\n    const [menuPosition, setMenuPosition] = useState<{ x: number; y: number } | null>(null);\r\n    const designTokens = getDesignTokens(isDarkMode);\r\n\r\n    const calculateMenuPosition = (element: HTMLElement) => {\r\n        const rect = element.getBoundingClientRect();\r\n        const viewportWidth = window.innerWidth;\r\n        \r\n        // Check if there's enough space on the right\r\n        const spaceOnRight = viewportWidth - rect.right;\r\n        const willFitOnRight = spaceOnRight >= (MENU_WIDTH + MENU_GAP);\r\n\r\n        return {\r\n            x: willFitOnRight ? rect.right + MENU_GAP : rect.right - MENU_WIDTH - MENU_GAP,\r\n            y: rect.top,\r\n        };\r\n    };\r\n\r\n    // Update menu position on window resize\r\n    useLayoutEffect(() => {\r\n        if (selectedId) {\r\n            const element = document.getElementById(selectedId);\r\n            if (element) {\r\n                setMenuPosition(calculateMenuPosition(element));\r\n            }\r\n        }\r\n    }, [selectedId, window.innerWidth]);\r\n\r\n    const handleSelect = (id: string) => {\r\n        const newSelectedId = id === selectedId ? null : id;\r\n        setSelectedId(newSelectedId);\r\n        onSelectionChange?.(newSelectedId);\r\n\r\n        if (newSelectedId) {\r\n            const element = document.getElementById(id);\r\n            if (element) {\r\n                setMenuPosition(calculateMenuPosition(element));\r\n            }\r\n        } else {\r\n            setMenuPosition(null);\r\n        }\r\n    };\r\n\r\n    const getSelectedPerson = () => {\r\n        if (!selectedId) return null;\r\n\r\n        const [type, teamIndex, memberIndex] = selectedId.split('-');\r\n        const team = organization.teams[parseInt(teamIndex)];\r\n        \r\n        if (type === 'manager') {\r\n            return {\r\n                ...team.manager,\r\n                role: 'Manager' as const\r\n            };\r\n        } else {\r\n            return {\r\n                ...team.members[parseInt(memberIndex)],\r\n                role: 'IC' as const\r\n            };\r\n        }\r\n    };\r\n\r\n    const selectedPerson = getSelectedPerson();\r\n\r\n    return (\r\n        <div style={{\r\n            width: '100%',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            position: 'relative',\r\n        }}>\r\n            <div style={{\r\n                display: 'grid',\r\n                gridTemplateColumns: `repeat(auto-fill, minmax(${designTokens.layout.cardMinWidth}, max-content))`,\r\n                gap: designTokens.layout.columnGap,\r\n                maxWidth: '100%',\r\n                justifyContent: 'center',\r\n            }}>\r\n                {organization.teams.map((team, teamIndex) => (\r\n                    <div key={teamIndex} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        gap: designTokens.layout.rowGap,\r\n                        width: 'fit-content',\r\n                    }}>\r\n                        {/* Manager Card */}\r\n                        <div id={`manager-${teamIndex}`}>\r\n                            <AvatarCard\r\n                                id={`manager-${teamIndex}`}\r\n                                name={team.manager.name}\r\n                                title={team.manager.title}\r\n                                imageUrl={team.manager.imageUrl}\r\n                                role=\"Manager\"\r\n                                isDarkMode={isDarkMode}\r\n                                isSelected={selectedId === `manager-${teamIndex}`}\r\n                                onSelect={handleSelect}\r\n                            />\r\n                        </div>\r\n\r\n                        {/* Team Members */}\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            gap: designTokens.layout.rowGap,\r\n                        }}>\r\n                            {team.members.map((member, memberIndex) => (\r\n                                <div key={memberIndex} id={`member-${teamIndex}-${memberIndex}`}>\r\n                                    <AvatarCard\r\n                                        id={`member-${teamIndex}-${memberIndex}`}\r\n                                        name={member.name}\r\n                                        title={member.title}\r\n                                        imageUrl={member.imageUrl}\r\n                                        role=\"IC\"\r\n                                        isDarkMode={isDarkMode}\r\n                                        isSelected={selectedId === `member-${teamIndex}-${memberIndex}`}\r\n                                        onSelect={handleSelect}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Context Menu */}\r\n            {selectedPerson && menuPosition && (\r\n                <ContextMenu\r\n                    person={selectedPerson}\r\n                    isDarkMode={isDarkMode}\r\n                    position={menuPosition}\r\n                    onClose={() => {\r\n                        setSelectedId(null);\r\n                        setMenuPosition(null);\r\n                        onSelectionChange?.(null);\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}