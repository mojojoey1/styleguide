{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jopitt\\\\Documents\\\\code\\\\figmaTest2\\\\src\\\\theme\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState('light');\n\n  // Check for system preference on mount\n  useEffect(() => {\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    setTheme(prefersDark ? 'dark' : 'light');\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      setTheme(e.matches ? 'dark' : 'light');\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"Z8UCD9KudyQA62DCQ9e5cf9+m5k=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// Hook to get theme-specific colors\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const useThemeColors = () => {\n  _s3();\n  const {\n    theme\n  } = useTheme();\n  return {\n    theme\n  };\n};\n_s3(useThemeColors, \"JkSxfi8+JQlqgIgDOc3wQN+nVIw=\", false, function () {\n  return [useTheme];\n});\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setTheme","prefersDark","window","matchMedia","matches","mediaQuery","handleChange","e","addEventListener","removeEventListener","toggleTheme","prevTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","useThemeColors","_s3","$RefreshReg$"],"sources":["C:/Users/jopitt/Documents/code/figmaTest2/src/theme/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { ThemeVariant } from './types';\r\n\r\ninterface ThemeContextType {\r\n  theme: ThemeVariant;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [theme, setTheme] = useState<ThemeVariant>('light');\r\n\r\n  // Check for system preference on mount\r\n  useEffect(() => {\r\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    setTheme(prefersDark ? 'dark' : 'light');\r\n\r\n    // Listen for system theme changes\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    const handleChange = (e: MediaQueryListEvent) => {\r\n      setTheme(e.matches ? 'dark' : 'light');\r\n    };\r\n\r\n    mediaQuery.addEventListener('change', handleChange);\r\n    return () => mediaQuery.removeEventListener('change', handleChange);\r\n  }, []);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Hook to get theme-specific colors\r\nexport const useThemeColors = () => {\r\n  const { theme } = useTheme();\r\n  return { theme };\r\n}; "],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ9E,MAAMC,YAAY,gBAAGN,aAAa,CAA+BO,SAAS,CAAC;AAE3E,OAAO,MAAMC,aAAsD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAe,OAAO,CAAC;;EAEzD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,WAAW,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;IAC7EJ,QAAQ,CAACC,WAAW,GAAG,MAAM,GAAG,OAAO,CAAC;;IAExC;IACA,MAAMI,UAAU,GAAGH,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IACpE,MAAMG,YAAY,GAAIC,CAAsB,IAAK;MAC/CP,QAAQ,CAACO,CAAC,CAACH,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;IACxC,CAAC;IAEDC,UAAU,CAACG,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IACnD,OAAO,MAAMD,UAAU,CAACI,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBV,QAAQ,CAACW,SAAS,IAAIA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EACjE,CAAC;EAED,oBACElB,OAAA,CAACC,YAAY,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEd,KAAK;MAAEW;IAAY,CAAE;IAAAb,QAAA,EAClDA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACnB,EAAA,CA3BWF,aAAsD;AAAAsB,EAAA,GAAtDtB,aAAsD;AA6BnE,OAAO,MAAMuB,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGhC,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI2B,OAAO,KAAK1B,SAAS,EAAE;IACzB,MAAM,IAAI2B,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;;AAED;AAAAD,GAAA,CARaD,QAAQ;AASrB,OAAO,MAAMI,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,MAAM;IAAEzB;EAAM,CAAC,GAAGoB,QAAQ,CAAC,CAAC;EAC5B,OAAO;IAAEpB;EAAM,CAAC;AAClB,CAAC;AAACyB,GAAA,CAHWD,cAAc;EAAA,QACPJ,QAAQ;AAAA;AAAA,IAAAD,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}