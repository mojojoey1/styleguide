{"ast":null,"code":"export function parseOrgXML(xmlText) {\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n  const teams = Array.from(xmlDoc.getElementsByTagName('team')).map(teamNode => {\n    var _managerNode$getEleme, _managerNode$getEleme2;\n    const teamName = teamNode.getAttribute('name') || '';\n\n    // Parse manager\n    const managerNode = teamNode.getElementsByTagName('manager')[0];\n    const manager = {\n      name: managerNode.getElementsByTagName('name')[0].textContent || '',\n      title: ((_managerNode$getEleme = managerNode.getElementsByTagName('title')[0]) === null || _managerNode$getEleme === void 0 ? void 0 : _managerNode$getEleme.textContent) || undefined,\n      imageUrl: ((_managerNode$getEleme2 = managerNode.getElementsByTagName('imageUrl')[0]) === null || _managerNode$getEleme2 === void 0 ? void 0 : _managerNode$getEleme2.textContent) || undefined,\n      isManager: true\n    };\n\n    // Parse team members\n    const membersNode = teamNode.getElementsByTagName('members')[0];\n    const members = Array.from(membersNode.getElementsByTagName('member')).map(memberNode => {\n      var _memberNode$getElemen, _memberNode$getElemen2;\n      return {\n        name: memberNode.getElementsByTagName('name')[0].textContent || '',\n        title: ((_memberNode$getElemen = memberNode.getElementsByTagName('title')[0]) === null || _memberNode$getElemen === void 0 ? void 0 : _memberNode$getElemen.textContent) || undefined,\n        imageUrl: ((_memberNode$getElemen2 = memberNode.getElementsByTagName('imageUrl')[0]) === null || _memberNode$getElemen2 === void 0 ? void 0 : _memberNode$getElemen2.textContent) || undefined,\n        isManager: false\n      };\n    });\n    return {\n      name: teamName,\n      manager,\n      members\n    };\n  });\n  return {\n    teams\n  };\n}","map":{"version":3,"names":["parseOrgXML","xmlText","parser","DOMParser","xmlDoc","parseFromString","teams","Array","from","getElementsByTagName","map","teamNode","_managerNode$getEleme","_managerNode$getEleme2","teamName","getAttribute","managerNode","manager","name","textContent","title","undefined","imageUrl","isManager","membersNode","members","memberNode","_memberNode$getElemen","_memberNode$getElemen2"],"sources":["C:/Users/jopitt/Documents/code/figmaTest2/src/xmlParser.ts"],"sourcesContent":["import { Organization, Team, TeamMember } from './types';\r\n\r\nexport function parseOrgXML(xmlText: string): Organization {\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\r\n\r\n    const teams: Team[] = Array.from(xmlDoc.getElementsByTagName('team')).map(teamNode => {\r\n        const teamName = teamNode.getAttribute('name') || '';\r\n        \r\n        // Parse manager\r\n        const managerNode = teamNode.getElementsByTagName('manager')[0];\r\n        const manager: TeamMember = {\r\n            name: managerNode.getElementsByTagName('name')[0].textContent || '',\r\n            title: managerNode.getElementsByTagName('title')[0]?.textContent || undefined,\r\n            imageUrl: managerNode.getElementsByTagName('imageUrl')[0]?.textContent || undefined,\r\n            isManager: true\r\n        };\r\n\r\n        // Parse team members\r\n        const membersNode = teamNode.getElementsByTagName('members')[0];\r\n        const members: TeamMember[] = Array.from(membersNode.getElementsByTagName('member')).map(memberNode => ({\r\n            name: memberNode.getElementsByTagName('name')[0].textContent || '',\r\n            title: memberNode.getElementsByTagName('title')[0]?.textContent || undefined,\r\n            imageUrl: memberNode.getElementsByTagName('imageUrl')[0]?.textContent || undefined,\r\n            isManager: false\r\n        }));\r\n\r\n        return {\r\n            name: teamName,\r\n            manager,\r\n            members\r\n        };\r\n    });\r\n\r\n    return { teams };\r\n} "],"mappings":"AAEA,OAAO,SAASA,WAAWA,CAACC,OAAe,EAAgB;EACvD,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;EAC9B,MAAMC,MAAM,GAAGF,MAAM,CAACG,eAAe,CAACJ,OAAO,EAAE,UAAU,CAAC;EAE1D,MAAMK,KAAa,GAAGC,KAAK,CAACC,IAAI,CAACJ,MAAM,CAACK,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAACC,GAAG,CAACC,QAAQ,IAAI;IAAA,IAAAC,qBAAA,EAAAC,sBAAA;IAClF,MAAMC,QAAQ,GAAGH,QAAQ,CAACI,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE;;IAEpD;IACA,MAAMC,WAAW,GAAGL,QAAQ,CAACF,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC/D,MAAMQ,OAAmB,GAAG;MACxBC,IAAI,EAAEF,WAAW,CAACP,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAACU,WAAW,IAAI,EAAE;MACnEC,KAAK,EAAE,EAAAR,qBAAA,GAAAI,WAAW,CAACP,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,cAAAG,qBAAA,uBAA5CA,qBAAA,CAA8CO,WAAW,KAAIE,SAAS;MAC7EC,QAAQ,EAAE,EAAAT,sBAAA,GAAAG,WAAW,CAACP,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,cAAAI,sBAAA,uBAA/CA,sBAAA,CAAiDM,WAAW,KAAIE,SAAS;MACnFE,SAAS,EAAE;IACf,CAAC;;IAED;IACA,MAAMC,WAAW,GAAGb,QAAQ,CAACF,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC/D,MAAMgB,OAAqB,GAAGlB,KAAK,CAACC,IAAI,CAACgB,WAAW,CAACf,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAACC,GAAG,CAACgB,UAAU;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MAAA,OAAK;QACpGV,IAAI,EAAEQ,UAAU,CAACjB,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAACU,WAAW,IAAI,EAAE;QAClEC,KAAK,EAAE,EAAAO,qBAAA,GAAAD,UAAU,CAACjB,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,cAAAkB,qBAAA,uBAA3CA,qBAAA,CAA6CR,WAAW,KAAIE,SAAS;QAC5EC,QAAQ,EAAE,EAAAM,sBAAA,GAAAF,UAAU,CAACjB,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,cAAAmB,sBAAA,uBAA9CA,sBAAA,CAAgDT,WAAW,KAAIE,SAAS;QAClFE,SAAS,EAAE;MACf,CAAC;IAAA,CAAC,CAAC;IAEH,OAAO;MACHL,IAAI,EAAEJ,QAAQ;MACdG,OAAO;MACPQ;IACJ,CAAC;EACL,CAAC,CAAC;EAEF,OAAO;IAAEnB;EAAM,CAAC;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}